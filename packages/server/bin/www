#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mercury:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
// const path = require('path');
const dns = require('dns');
const {Resolver} = require('dns');

const resolver = new Resolver();
require('dotenv').config({path: '../../.env'});

const options = {
    family: 4,
    hints: dns.ADDRCONFIG || dns.V4MAPPED,
};

dns.lookup('www.peastar.net', options, (err, address, family) => {
    console.log(err);
    console.log('address:', address);
    console.log(family);
    dns.reverse(address, (error, hostname) => {
        console.log('27: ', hostname);
        if (error) {
            console.log(error.stack);
        }

        console.log('reverse for ' + address + ': ' + JSON.stringify(hostname));
    });
});

dns.lookupService('192.168.0.9', 80, (err, hostname, service) => {
    console.log('37: ', hostname, service);
    if (err) {
        console.log(err);
    }
});

dns.lookupService('127.0.0.1', 80, (err, hostname, service) => {
    console.log('44: ', hostname, service);
    if (err) {
        console.log(err);
    }
});

resolver.setServers(['192.168.0.9', '127.0.0.1']);

resolver.resolve4('peastar.net', (err, addresses) => {
    console.log('56: ', addresses);
    if (err) {
        console.log('58: ', err);
    }
});

resolver.resolve4('www.peastar.net', (err, addresses) => {
    console.log('63: ', addresses);
    if (err) {
        console.log('65: ', err);
    }
});

resolver.resolveAny('www.peastar.net', (err, ret) => {
    if (err) {
        console.log(`err: ${err}`);
    } else {
        console.log(`ret: ${JSON.stringify(ret)}`);
    }
});

const credentials = {
    key: fs.readFileSync('/etc/letsencrypt/live/peacestar.art/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/peacestar.art/fullchain.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/peacestar.art/chain.pem'),
};

/**
 * Get port from environment and store in Express.
 */
console.log('85', process.env.PORT);

const port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */
console.log(port);
server.listen(port, () => console.log(`Server is listening on port: ${port}`));
server.on('error', onError);
server.on('listening', onListening);
httpsServer.listen(443, () => {
    console.log('HTTPS Server running on port 443');
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const portNum = parseInt(val, 10);

    if (isNaN(portNum)) {
        // named pipe
        return val;
    }

    if (portNum >= 0) {
        // port number
        return portNum;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use!');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
